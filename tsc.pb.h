// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsc.proto

#ifndef PROTOBUF_tsc_2eproto__INCLUDED
#define PROTOBUF_tsc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_tsc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsUserImpl();
void InitDefaultsUser();
void InitDefaultsFollowRequestImpl();
void InitDefaultsFollowRequest();
void InitDefaultsUnfollowRequestImpl();
void InitDefaultsUnfollowRequest();
void InitDefaultsConnectRequestImpl();
void InitDefaultsConnectRequest();
void InitDefaultsFollowReplyImpl();
void InitDefaultsFollowReply();
void InitDefaultsListReplyImpl();
void InitDefaultsListReply();
inline void InitDefaults() {
  InitDefaultsUser();
  InitDefaultsFollowRequest();
  InitDefaultsUnfollowRequest();
  InitDefaultsConnectRequest();
  InitDefaultsFollowReply();
  InitDefaultsListReply();
}
}  // namespace protobuf_tsc_2eproto
namespace tsc {
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class FollowReply;
class FollowReplyDefaultTypeInternal;
extern FollowReplyDefaultTypeInternal _FollowReply_default_instance_;
class FollowRequest;
class FollowRequestDefaultTypeInternal;
extern FollowRequestDefaultTypeInternal _FollowRequest_default_instance_;
class ListReply;
class ListReplyDefaultTypeInternal;
extern ListReplyDefaultTypeInternal _ListReply_default_instance_;
class UnfollowRequest;
class UnfollowRequestDefaultTypeInternal;
extern UnfollowRequestDefaultTypeInternal _UnfollowRequest_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace tsc
namespace tsc {

// ===================================================================

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsc.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const PROTOBUF_FINAL { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:tsc.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_tsc_2eproto::TableStruct;
  friend void ::protobuf_tsc_2eproto::InitDefaultsUserImpl();
};
// -------------------------------------------------------------------

class FollowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsc.FollowRequest) */ {
 public:
  FollowRequest();
  virtual ~FollowRequest();

  FollowRequest(const FollowRequest& from);

  inline FollowRequest& operator=(const FollowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FollowRequest(FollowRequest&& from) noexcept
    : FollowRequest() {
    *this = ::std::move(from);
  }

  inline FollowRequest& operator=(FollowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FollowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FollowRequest* internal_default_instance() {
    return reinterpret_cast<const FollowRequest*>(
               &_FollowRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FollowRequest* other);
  friend void swap(FollowRequest& a, FollowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FollowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FollowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FollowRequest& from);
  void MergeFrom(const FollowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FollowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tsc.User user1 = 1;
  bool has_user1() const;
  void clear_user1();
  static const int kUser1FieldNumber = 1;
  const ::tsc::User& user1() const;
  ::tsc::User* release_user1();
  ::tsc::User* mutable_user1();
  void set_allocated_user1(::tsc::User* user1);

  // .tsc.User user2 = 2;
  bool has_user2() const;
  void clear_user2();
  static const int kUser2FieldNumber = 2;
  const ::tsc::User& user2() const;
  ::tsc::User* release_user2();
  ::tsc::User* mutable_user2();
  void set_allocated_user2(::tsc::User* user2);

  // @@protoc_insertion_point(class_scope:tsc.FollowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tsc::User* user1_;
  ::tsc::User* user2_;
  mutable int _cached_size_;
  friend struct ::protobuf_tsc_2eproto::TableStruct;
  friend void ::protobuf_tsc_2eproto::InitDefaultsFollowRequestImpl();
};
// -------------------------------------------------------------------

class UnfollowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsc.UnfollowRequest) */ {
 public:
  UnfollowRequest();
  virtual ~UnfollowRequest();

  UnfollowRequest(const UnfollowRequest& from);

  inline UnfollowRequest& operator=(const UnfollowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnfollowRequest(UnfollowRequest&& from) noexcept
    : UnfollowRequest() {
    *this = ::std::move(from);
  }

  inline UnfollowRequest& operator=(UnfollowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnfollowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnfollowRequest* internal_default_instance() {
    return reinterpret_cast<const UnfollowRequest*>(
               &_UnfollowRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UnfollowRequest* other);
  friend void swap(UnfollowRequest& a, UnfollowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnfollowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UnfollowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnfollowRequest& from);
  void MergeFrom(const UnfollowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnfollowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tsc.User user1 = 1;
  bool has_user1() const;
  void clear_user1();
  static const int kUser1FieldNumber = 1;
  const ::tsc::User& user1() const;
  ::tsc::User* release_user1();
  ::tsc::User* mutable_user1();
  void set_allocated_user1(::tsc::User* user1);

  // .tsc.User user2 = 2;
  bool has_user2() const;
  void clear_user2();
  static const int kUser2FieldNumber = 2;
  const ::tsc::User& user2() const;
  ::tsc::User* release_user2();
  ::tsc::User* mutable_user2();
  void set_allocated_user2(::tsc::User* user2);

  // @@protoc_insertion_point(class_scope:tsc.UnfollowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tsc::User* user1_;
  ::tsc::User* user2_;
  mutable int _cached_size_;
  friend struct ::protobuf_tsc_2eproto::TableStruct;
  friend void ::protobuf_tsc_2eproto::InitDefaultsUnfollowRequestImpl();
};
// -------------------------------------------------------------------

class ConnectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsc.ConnectRequest) */ {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ConnectRequest* other);
  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tsc.User user1 = 1;
  bool has_user1() const;
  void clear_user1();
  static const int kUser1FieldNumber = 1;
  const ::tsc::User& user1() const;
  ::tsc::User* release_user1();
  ::tsc::User* mutable_user1();
  void set_allocated_user1(::tsc::User* user1);

  // @@protoc_insertion_point(class_scope:tsc.ConnectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tsc::User* user1_;
  mutable int _cached_size_;
  friend struct ::protobuf_tsc_2eproto::TableStruct;
  friend void ::protobuf_tsc_2eproto::InitDefaultsConnectRequestImpl();
};
// -------------------------------------------------------------------

class FollowReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsc.FollowReply) */ {
 public:
  FollowReply();
  virtual ~FollowReply();

  FollowReply(const FollowReply& from);

  inline FollowReply& operator=(const FollowReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FollowReply(FollowReply&& from) noexcept
    : FollowReply() {
    *this = ::std::move(from);
  }

  inline FollowReply& operator=(FollowReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FollowReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FollowReply* internal_default_instance() {
    return reinterpret_cast<const FollowReply*>(
               &_FollowReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FollowReply* other);
  friend void swap(FollowReply& a, FollowReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FollowReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FollowReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FollowReply& from);
  void MergeFrom(const FollowReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FollowReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:tsc.FollowReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend struct ::protobuf_tsc_2eproto::TableStruct;
  friend void ::protobuf_tsc_2eproto::InitDefaultsFollowReplyImpl();
};
// -------------------------------------------------------------------

class ListReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsc.ListReply) */ {
 public:
  ListReply();
  virtual ~ListReply();

  ListReply(const ListReply& from);

  inline ListReply& operator=(const ListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListReply(ListReply&& from) noexcept
    : ListReply() {
    *this = ::std::move(from);
  }

  inline ListReply& operator=(ListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReply* internal_default_instance() {
    return reinterpret_cast<const ListReply*>(
               &_ListReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ListReply* other);
  friend void swap(ListReply& a, ListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ListReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListReply& from);
  void MergeFrom(const ListReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tsc.User users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  const ::tsc::User& users(int index) const;
  ::tsc::User* mutable_users(int index);
  ::tsc::User* add_users();
  ::google::protobuf::RepeatedPtrField< ::tsc::User >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::tsc::User >&
      users() const;

  // @@protoc_insertion_point(class_scope:tsc.ListReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tsc::User > users_;
  mutable int _cached_size_;
  friend struct ::protobuf_tsc_2eproto::TableStruct;
  friend void ::protobuf_tsc_2eproto::InitDefaultsListReplyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// string name = 1;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:tsc.User.name)
  return name_.GetNoArena();
}
inline void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsc.User.name)
}
#if LANG_CXX11
inline void User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tsc.User.name)
}
#endif
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsc.User.name)
}
inline void User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsc.User.name)
}
inline ::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tsc.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:tsc.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tsc.User.name)
}

// -------------------------------------------------------------------

// FollowRequest

// .tsc.User user1 = 1;
inline bool FollowRequest::has_user1() const {
  return this != internal_default_instance() && user1_ != NULL;
}
inline void FollowRequest::clear_user1() {
  if (GetArenaNoVirtual() == NULL && user1_ != NULL) {
    delete user1_;
  }
  user1_ = NULL;
}
inline const ::tsc::User& FollowRequest::user1() const {
  const ::tsc::User* p = user1_;
  // @@protoc_insertion_point(field_get:tsc.FollowRequest.user1)
  return p != NULL ? *p : *reinterpret_cast<const ::tsc::User*>(
      &::tsc::_User_default_instance_);
}
inline ::tsc::User* FollowRequest::release_user1() {
  // @@protoc_insertion_point(field_release:tsc.FollowRequest.user1)
  
  ::tsc::User* temp = user1_;
  user1_ = NULL;
  return temp;
}
inline ::tsc::User* FollowRequest::mutable_user1() {
  
  if (user1_ == NULL) {
    user1_ = new ::tsc::User;
  }
  // @@protoc_insertion_point(field_mutable:tsc.FollowRequest.user1)
  return user1_;
}
inline void FollowRequest::set_allocated_user1(::tsc::User* user1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user1_;
  }
  if (user1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user1, submessage_arena);
    }
    
  } else {
    
  }
  user1_ = user1;
  // @@protoc_insertion_point(field_set_allocated:tsc.FollowRequest.user1)
}

// .tsc.User user2 = 2;
inline bool FollowRequest::has_user2() const {
  return this != internal_default_instance() && user2_ != NULL;
}
inline void FollowRequest::clear_user2() {
  if (GetArenaNoVirtual() == NULL && user2_ != NULL) {
    delete user2_;
  }
  user2_ = NULL;
}
inline const ::tsc::User& FollowRequest::user2() const {
  const ::tsc::User* p = user2_;
  // @@protoc_insertion_point(field_get:tsc.FollowRequest.user2)
  return p != NULL ? *p : *reinterpret_cast<const ::tsc::User*>(
      &::tsc::_User_default_instance_);
}
inline ::tsc::User* FollowRequest::release_user2() {
  // @@protoc_insertion_point(field_release:tsc.FollowRequest.user2)
  
  ::tsc::User* temp = user2_;
  user2_ = NULL;
  return temp;
}
inline ::tsc::User* FollowRequest::mutable_user2() {
  
  if (user2_ == NULL) {
    user2_ = new ::tsc::User;
  }
  // @@protoc_insertion_point(field_mutable:tsc.FollowRequest.user2)
  return user2_;
}
inline void FollowRequest::set_allocated_user2(::tsc::User* user2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user2_;
  }
  if (user2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user2, submessage_arena);
    }
    
  } else {
    
  }
  user2_ = user2;
  // @@protoc_insertion_point(field_set_allocated:tsc.FollowRequest.user2)
}

// -------------------------------------------------------------------

// UnfollowRequest

// .tsc.User user1 = 1;
inline bool UnfollowRequest::has_user1() const {
  return this != internal_default_instance() && user1_ != NULL;
}
inline void UnfollowRequest::clear_user1() {
  if (GetArenaNoVirtual() == NULL && user1_ != NULL) {
    delete user1_;
  }
  user1_ = NULL;
}
inline const ::tsc::User& UnfollowRequest::user1() const {
  const ::tsc::User* p = user1_;
  // @@protoc_insertion_point(field_get:tsc.UnfollowRequest.user1)
  return p != NULL ? *p : *reinterpret_cast<const ::tsc::User*>(
      &::tsc::_User_default_instance_);
}
inline ::tsc::User* UnfollowRequest::release_user1() {
  // @@protoc_insertion_point(field_release:tsc.UnfollowRequest.user1)
  
  ::tsc::User* temp = user1_;
  user1_ = NULL;
  return temp;
}
inline ::tsc::User* UnfollowRequest::mutable_user1() {
  
  if (user1_ == NULL) {
    user1_ = new ::tsc::User;
  }
  // @@protoc_insertion_point(field_mutable:tsc.UnfollowRequest.user1)
  return user1_;
}
inline void UnfollowRequest::set_allocated_user1(::tsc::User* user1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user1_;
  }
  if (user1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user1, submessage_arena);
    }
    
  } else {
    
  }
  user1_ = user1;
  // @@protoc_insertion_point(field_set_allocated:tsc.UnfollowRequest.user1)
}

// .tsc.User user2 = 2;
inline bool UnfollowRequest::has_user2() const {
  return this != internal_default_instance() && user2_ != NULL;
}
inline void UnfollowRequest::clear_user2() {
  if (GetArenaNoVirtual() == NULL && user2_ != NULL) {
    delete user2_;
  }
  user2_ = NULL;
}
inline const ::tsc::User& UnfollowRequest::user2() const {
  const ::tsc::User* p = user2_;
  // @@protoc_insertion_point(field_get:tsc.UnfollowRequest.user2)
  return p != NULL ? *p : *reinterpret_cast<const ::tsc::User*>(
      &::tsc::_User_default_instance_);
}
inline ::tsc::User* UnfollowRequest::release_user2() {
  // @@protoc_insertion_point(field_release:tsc.UnfollowRequest.user2)
  
  ::tsc::User* temp = user2_;
  user2_ = NULL;
  return temp;
}
inline ::tsc::User* UnfollowRequest::mutable_user2() {
  
  if (user2_ == NULL) {
    user2_ = new ::tsc::User;
  }
  // @@protoc_insertion_point(field_mutable:tsc.UnfollowRequest.user2)
  return user2_;
}
inline void UnfollowRequest::set_allocated_user2(::tsc::User* user2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user2_;
  }
  if (user2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user2, submessage_arena);
    }
    
  } else {
    
  }
  user2_ = user2;
  // @@protoc_insertion_point(field_set_allocated:tsc.UnfollowRequest.user2)
}

// -------------------------------------------------------------------

// ConnectRequest

// .tsc.User user1 = 1;
inline bool ConnectRequest::has_user1() const {
  return this != internal_default_instance() && user1_ != NULL;
}
inline void ConnectRequest::clear_user1() {
  if (GetArenaNoVirtual() == NULL && user1_ != NULL) {
    delete user1_;
  }
  user1_ = NULL;
}
inline const ::tsc::User& ConnectRequest::user1() const {
  const ::tsc::User* p = user1_;
  // @@protoc_insertion_point(field_get:tsc.ConnectRequest.user1)
  return p != NULL ? *p : *reinterpret_cast<const ::tsc::User*>(
      &::tsc::_User_default_instance_);
}
inline ::tsc::User* ConnectRequest::release_user1() {
  // @@protoc_insertion_point(field_release:tsc.ConnectRequest.user1)
  
  ::tsc::User* temp = user1_;
  user1_ = NULL;
  return temp;
}
inline ::tsc::User* ConnectRequest::mutable_user1() {
  
  if (user1_ == NULL) {
    user1_ = new ::tsc::User;
  }
  // @@protoc_insertion_point(field_mutable:tsc.ConnectRequest.user1)
  return user1_;
}
inline void ConnectRequest::set_allocated_user1(::tsc::User* user1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user1_;
  }
  if (user1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user1, submessage_arena);
    }
    
  } else {
    
  }
  user1_ = user1;
  // @@protoc_insertion_point(field_set_allocated:tsc.ConnectRequest.user1)
}

// -------------------------------------------------------------------

// FollowReply

// string message = 1;
inline void FollowReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FollowReply::message() const {
  // @@protoc_insertion_point(field_get:tsc.FollowReply.message)
  return message_.GetNoArena();
}
inline void FollowReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsc.FollowReply.message)
}
#if LANG_CXX11
inline void FollowReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tsc.FollowReply.message)
}
#endif
inline void FollowReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsc.FollowReply.message)
}
inline void FollowReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsc.FollowReply.message)
}
inline ::std::string* FollowReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:tsc.FollowReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FollowReply::release_message() {
  // @@protoc_insertion_point(field_release:tsc.FollowReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FollowReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:tsc.FollowReply.message)
}

// -------------------------------------------------------------------

// ListReply

// repeated .tsc.User users = 1;
inline int ListReply::users_size() const {
  return users_.size();
}
inline void ListReply::clear_users() {
  users_.Clear();
}
inline const ::tsc::User& ListReply::users(int index) const {
  // @@protoc_insertion_point(field_get:tsc.ListReply.users)
  return users_.Get(index);
}
inline ::tsc::User* ListReply::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:tsc.ListReply.users)
  return users_.Mutable(index);
}
inline ::tsc::User* ListReply::add_users() {
  // @@protoc_insertion_point(field_add:tsc.ListReply.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tsc::User >*
ListReply::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:tsc.ListReply.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tsc::User >&
ListReply::users() const {
  // @@protoc_insertion_point(field_list:tsc.ListReply.users)
  return users_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tsc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tsc_2eproto__INCLUDED
