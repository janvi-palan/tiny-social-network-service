// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tsc.proto

#include "tsc.pb.h"
#include "tsc.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace tsc {

static const char* TscService_method_names[] = {
  "/tsc.TscService/AddToUsersDB",
  "/tsc.TscService/RemoveFromUsersDB",
  "/tsc.TscService/GetAllFollowers",
};

std::unique_ptr< TscService::Stub> TscService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< TscService::Stub> stub(new TscService::Stub(channel));
  return stub;
}

TscService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddToUsersDB_(TscService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFromUsersDB_(TscService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllFollowers_(TscService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TscService::Stub::AddToUsersDB(::grpc::ClientContext* context, const ::tsc::FollowRequest& request, ::tsc::FollowReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddToUsersDB_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tsc::FollowReply>* TscService::Stub::AsyncAddToUsersDBRaw(::grpc::ClientContext* context, const ::tsc::FollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsc::FollowReply>::Create(channel_.get(), cq, rpcmethod_AddToUsersDB_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tsc::FollowReply>* TscService::Stub::PrepareAsyncAddToUsersDBRaw(::grpc::ClientContext* context, const ::tsc::FollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsc::FollowReply>::Create(channel_.get(), cq, rpcmethod_AddToUsersDB_, context, request, false);
}

::grpc::Status TscService::Stub::RemoveFromUsersDB(::grpc::ClientContext* context, const ::tsc::UnfollowRequest& request, ::tsc::FollowReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveFromUsersDB_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tsc::FollowReply>* TscService::Stub::AsyncRemoveFromUsersDBRaw(::grpc::ClientContext* context, const ::tsc::UnfollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsc::FollowReply>::Create(channel_.get(), cq, rpcmethod_RemoveFromUsersDB_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tsc::FollowReply>* TscService::Stub::PrepareAsyncRemoveFromUsersDBRaw(::grpc::ClientContext* context, const ::tsc::UnfollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsc::FollowReply>::Create(channel_.get(), cq, rpcmethod_RemoveFromUsersDB_, context, request, false);
}

::grpc::Status TscService::Stub::GetAllFollowers(::grpc::ClientContext* context, const ::tsc::User& request, ::tsc::ListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllFollowers_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tsc::ListReply>* TscService::Stub::AsyncGetAllFollowersRaw(::grpc::ClientContext* context, const ::tsc::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsc::ListReply>::Create(channel_.get(), cq, rpcmethod_GetAllFollowers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tsc::ListReply>* TscService::Stub::PrepareAsyncGetAllFollowersRaw(::grpc::ClientContext* context, const ::tsc::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsc::ListReply>::Create(channel_.get(), cq, rpcmethod_GetAllFollowers_, context, request, false);
}

TscService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TscService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TscService::Service, ::tsc::FollowRequest, ::tsc::FollowReply>(
          std::mem_fn(&TscService::Service::AddToUsersDB), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TscService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TscService::Service, ::tsc::UnfollowRequest, ::tsc::FollowReply>(
          std::mem_fn(&TscService::Service::RemoveFromUsersDB), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TscService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TscService::Service, ::tsc::User, ::tsc::ListReply>(
          std::mem_fn(&TscService::Service::GetAllFollowers), this)));
}

TscService::Service::~Service() {
}

::grpc::Status TscService::Service::AddToUsersDB(::grpc::ServerContext* context, const ::tsc::FollowRequest* request, ::tsc::FollowReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TscService::Service::RemoveFromUsersDB(::grpc::ServerContext* context, const ::tsc::UnfollowRequest* request, ::tsc::FollowReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TscService::Service::GetAllFollowers(::grpc::ServerContext* context, const ::tsc::User* request, ::tsc::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tsc

